from odoo import models, fields, _
from odoo.exceptions import UserError
import socket
import time
from datetime import datetime

class PrintVins(models.Model):
    _name = 'print.vins'
    _description = 'Print VIN Labels'
    
    # ... (otros campos permanecen igual)

    def check_printer_connection(self, printer_ip, printer_port=9100, timeout=10):
        try:
            socket.setdefaulttimeout(timeout)
            with socket.create_connection((printer_ip, printer_port), timeout=timeout):
                return True
        except (socket.timeout, ConnectionRefusedError, OSError) as e:
            raise UserError(_('No se pudo conectar a la impresora %s. Error: %s') % (printer_ip, str(e)))
        except Exception as e:
            raise UserError(_('Error inesperado al conectar con la impresora: %s') % str(e))

    def send_zpl_to_printer(self, printer_ip, zpl_code, printer_port=9100, timeout=20):
        try:
            socket.setdefaulttimeout(timeout)
            with socket.create_connection((printer_ip, printer_port), timeout=timeout) as s:
                s.sendall(zpl_code.encode('utf-8'))
                time.sleep(1)  # Pequeña pausa para asegurar el envío
            return True
        except Exception as e:
            raise UserError(_('Error al enviar a la impresora %s: %s') % (printer_ip, str(e)))

    def print_vins(self):
        try:
            if not self.printer_ids:
                raise UserError(_("No se ha seleccionado ninguna impresora."))

            # ... (código para preparar datos permanece igual)

           from odoo import models, fields, _
from odoo.exceptions import UserError
import socket
import time
from datetime import datetime

class PrintVins(models.Model):
    _name = 'print.vins'
    _description = 'Print VIN Labels'
    
    name = fields.Char(string='Name')
    sale_order = fields.Many2one('sale.order', string='Sales Orders')
    wheel_nut_id = fields.Many2many(comodel_name='wheel.nut', string='Wheel Nut Registry')
    model_hs7 = fields.Many2many(comodel_name='model.hs7', string='MODEL HS7')
    gvwr = fields.Many2many(comodel_name='vin_generator.gvwr_manager', string='gvwr_related')
    gawr = fields.Many2many(comodel_name='vin_generator.vin_generator', string='gawr_related')
    gawr_lb = fields.Float(string='Gawr lb')
    printer_ip = fields.Char('Dirección IP de la Impresora', default='192.168.60.25')
    printer_port = fields.Integer('Puerto de la Impresora', default=9100, required=True)
    weight_total = fields.Float(string='Peso total')
    product_name = fields.Char(string='Product_name')
    
    printer_ids = fields.Many2many(
        'iot.device',
        string='Impresoras Zebra',
        domain="[('type', '=', 'printer')]",
    )

    def get_data(self):
        list_of_data = []
        manufacturing_order_list = self.env['mrp.production'].search([])
        for order in manufacturing_order_list:
            if hasattr(order, 'vin_dispayed') and order.vin_dispayed:
                product_vin = order.vin_dispayed
                product_name = order.product_id.display_name
                date = order.date_planned_start
                list_of_data.append({
                    "vin": product_vin,
                    "date": date,
                    "product_name": product_name,
                    "order_id": order.id,
                })
        if not list_of_data:
            raise UserError(_("No se encontraron órdenes de producción con el campo 'vin_dispayed'."))
        return list_of_data

    def check_printer_connection(self, printer_ip, printer_port=9100, timeout=10):
        try:
            socket.setdefaulttimeout(timeout)
            with socket.create_connection((printer_ip, printer_port), timeout=timeout):
                return True
        except (socket.timeout, ConnectionRefusedError, OSError) as e:
            raise UserError(_('No se pudo conectar a la impresora %s. Error: %s') % (printer_ip, str(e)))
        except Exception as e:
            raise UserError(_('Error inesperado al conectar con la impresora: %s') % str(e))

    def send_zpl_to_printer(self, printer_ip, zpl_code, printer_port=9100, timeout=20):
        try:
            socket.setdefaulttimeout(timeout)
            with socket.create_connection((printer_ip, printer_port), timeout=timeout) as s:
                s.sendall(zpl_code.encode('utf-8'))
                time.sleep(1) 
            return True
        except Exception as e:
            raise UserError(_('Error al enviar a la impresora %s: %s') % (printer_ip, str(e)))



    def print_vins(self):
        try:
            if not self.printer_ids:
                raise UserError(_("No se ha seleccionado ninguna impresora."))
            
            data_list = self.get_data()
            
            if not self.gvwr:
                raise UserError(_("No se ha seleccionado un registro para 'gvwr'."))
            gvwr_lb = self.gvwr.weight_lb
            gvwr_kg = self.gvwr.weight_kg

            if not self.gawr:
                raise UserError(_("No se ha seleccionado un registro para 'gawr'."))
            gawr_libras = self.gawr.name
            gawr_lb = gawr_libras[5:9]
            gawr_kg = round(float(gawr_lb) * 0.453592, 2)

            if not self.model_hs7:
                raise UserError(_("No se ha seleccionado un registro en 'HS7'."))

            product_name = self.model_hs7.ref_trailer.display_name
            model_string = self.model_hs7.model
            product = self.model_hs7.ref_trailer  
            weight_lb = product.dry_weight
            weight_kg = int(round(weight_lb * 0.453592)) 

            product_vin = None
            for data in data_list:
                if product_name.strip() == data["product_name"].strip(): 
                    product_vin = data.get("vin")
                    if product_vin:
                        break

            if not product_vin:
                raise UserError(_("No se encontró VIN para el producto"))

            if not self.wheel_nut_id:
                raise UserError(_("No se ha seleccionado un registro en 'Wheel Nut Registry'."))

            wheel_nut_string = self.wheel_nut_id.ref_product 
            wheel = wheel_nut_string.display_name.upper() 
            result = wheel[7:19]
            rin = wheel[50:60]
            lbs_wheels = ''
            tire_rating = ''

            if 'SINGLE' in wheel and 'R15' in wheel and ('10PLY' in wheel or '10PR' in wheel):
                lbs_wheels = '550 KPA/80 PSI'
                tire_rating = '2830 LBS'
            elif 'SINGLE' in wheel and 'R15' in wheel and ('8PLY' in wheel or '8PR' in wheel):
                lbs_wheels = '448 KPA/65 PSI'
                tire_rating = '2150 LBS'
            elif 'SINGLE' in wheel and 'R15' in wheel and ('6PLY' in wheel or '6PR' in wheel):
                lbs_wheels = '334 KPA/50 PSI'
                tire_rating = '1820 LBS'
            elif 'SINGLE' in wheel and 'R16' in wheel and ('10PLY' in wheel or '10PR' in wheel):
                lbs_wheels = '550 KPA/80 PSI'
                tire_rating = '3520 LBS'
            elif 'DUAL' in wheel and 'R16' in wheel and ('10PLY' in wheel or '10PR' in wheel):
                lbs_wheels = '550 KPA/80 PSI'
                tire_rating = '3080 LBS'
            elif 'SINGLE' in wheel and 'R16' in wheel and ('14PLY' in wheel or '14PR' in wheel):
                lbs_wheels = '758 KPA/110 PSI'
                tire_rating = '4400 LBS'
            elif 'DUAL' in wheel and 'R16' in wheel and ('14PLY' in wheel or '14PR' in wheel):
                lbs_wheels = '758 KPA/110 PSI'
                tire_rating = '3860 LBS'
            elif 'SUPER SINGLE' in wheel and 'R17.5' in wheel and ('18PLY' in wheel or '18PR' in wheel):
                lbs_wheels = '862 KPA/125 PSI'
                tire_rating = '6005 LBS'
            elif 'DUAL' in wheel and 'R17.5' in wheel and ('18PLY' in wheel or '18PR' in wheel):
                lbs_wheels = '862 KPA/125 PSI'
                tire_rating = '5675 LBS'

            zpl_template = """^XA
            ^FO650,50^ADR,20,10^FDThe weight of the cargo should never exceed {weight_kg} kg or {weight_lb} lbs^FS
            ^FO630,50^ADR,20,10^FDle poids du chargement ne doit jamais depasser {weight_kg} kg ou {weight_lb} lb.^FS
            ^FO490,5^ADR,20,10^FD{result}^FS
            ^FO490,210^ADR,20,10^FD{lbs_wheels}^FS
            ^FO450,5^ADR,20,10^FD{result}^FS
            ^FO450,210^ADR,20,10^FD{lbs_wheels}^FS
            ^FO400,5^ADR,20,10^FD{result}^FS
            ^FO400,210^ADR,20,10^FD{lbs_wheels}^FS
            ^FO390,800^ADR,15,10^FWN^FDR^FD {product_vin} ^FS
            ^FO300,50^ADR,25,10^FDMANUFACTURED BY/FABRIQUE PAR: HORIZON TRAILERS MEXICO S. DE R.L. DE C.V.^FS
            ^FO280,50^ADR,25,10^FDGVWR / PNBV  {gvwr_kg} KG ( {gvwr_lb} LB) DATE: {date}^FS
            ^FO260,50^ADR,25,10^FDGAWR (EACH AXLE) / PNBE ( CHAQUE ESSIEU) {gawr_kg} KG({gawr_lb})^FS
            ^FO240,50^ADR,25,10^FDTIRE/PNEU {result}  RIM/JANTE {rin} {tire_rating} ^FS
            ^FO215,50^ADR,25,10^FDCOLD INFL. PRESS/PRESS. DE GONFL. A FROID {lbs_wheels}/LCP SINGLE^FS
            ^FO190,50^A0R,20,20^FDTHIS VEHICLE TO ALL APPLICABLE U.S. FEDERAL MOTOR SAFETY STANDARDS IN EFFECT ON THE DATE OF MANUFACTURE ^FS
            ^FO170,50^A0R,20,20^FDSHOWN ABOVE.THIS VEHICLE CONFORMS TO ALL APPLICABLE STANDARDS PRESCRIBED UNDER CANADA.^FS
            ^FO150,50^A0R,20,20^FDATE OF MANUFACTURE./.. CE VEHICLE EST CONFORME A TOUS LES NORMES EN VIGUEUR A LA DATE DE SA FABRICATION.^FS
            ^FO130,50^A0R,20,20^FDSUR LA SECURITÉ DES VARIÉGLES AUTOMOBILES DU CANADA EN VIGUEUR A LA DATE DE SA FABRICATION.^FS
            ^FO90,50^ADR,15,10^FDVIN.:{product_vin}^FS
            ^FO90,500^ADR,15,10^FDTYPE: TRA/REM^FS
            ^FO90,800^ADR,15,10^FDMODEL: {model_string} ^FS
            ^XZ"""

            zpl_code = zpl_template.format(
                result=result,
                weight_lb=weight_lb,
                weight_kg=weight_kg,
                lbs_wheels=lbs_wheels,
                rin=rin,
                tire_rating=tire_rating,
                product_vin=product_vin,
                gvwr_kg=gvwr_kg,
                gvwr_lb=gvwr_lb,
                gawr_kg=gawr_kg,
                gawr_lb=gawr_lb,
                model_string=model_string,
                date=datetime.now().strftime('%d/%m/%Y')
            )

            
        
            return {
                'type': 'ir.actions.client',
                'tag': 'display_notification',
                'params': {
                    'title': _('Éxito'),
                    'message': _('Etiquetas enviadas a las impresoras seleccionadas.'),
                    'sticky': False,
                    'type': 'success',
                }
            }

        except UserError as e:
            raise e
        except Exception as e:
            raise UserError(_("Error en el proceso de impresión: %s") % str(e))